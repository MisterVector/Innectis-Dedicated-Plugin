package net.innectis.innplugin.handlers.datasource;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import net.innectis.innplugin.Configuration;
import net.innectis.innplugin.InnPlugin;
import net.innectis.innplugin.player.chat.ChatColor;

/**
 * @author Hret
 */
public class DBManager {

    /** the expeption it throws when there is something wrong with the class to connect with the mysql database */
    public static final String JDBC_EXCEPTION = "JDBC Exception: ";
    /** the expeption it throws when there is something wrong with a mysql statment */
    public static final String SQL_EXCEPTION = "SQL Exception: ";
    /** the connection with the database */
    private static Connection connection;

    /**
     * Opens a new database connection
     */
    public static Connection openNewConnection() throws SQLException {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            /** Open connection */
            return DriverManager.getConnection("jdbc:mysql://127.0.0.1/" + Configuration.MYSQL_DATABASE + "?useSSL=false",
                    Configuration.MYSQL_USERNAME, Configuration.MYSQL_PASSWORD);
        } catch (ClassNotFoundException e) {
            InnPlugin.logError("ClassNotFoundException ", e);
            System.err.println(JDBC_EXCEPTION + e);
        } catch (SQLException e) {
            InnPlugin.logError("SQLException ", e);
            System.err.println(SQL_EXCEPTION + e);
        }
        return null;
    }

    public static boolean checkConnection() throws SQLException {
        if (connection == null || connection.isClosed()) {
            connection = openNewConnection();

            if (connection == null) {
                return false;
            }

            PreparedStatement statement = null;
            ResultSet result = null;

            try { //DB VERSION CHECK
                statement = connection.prepareStatement("SELECT version FROM version");
                result = statement.executeQuery();

                if (result.next()) {
                    int vers = result.getInt("version");
                    if (vers == Configuration.DATABASE_VERSION) {
                        InnPlugin.logInfo("Database is up to date!");
                    } else {
                        InnPlugin.logCustom(ChatColor.RED, "Outdated Database, need version " + Configuration.DATABASE_VERSION
                                + " but found version " + vers + "!");
                    }
                } else {
                    InnPlugin.logCustom(ChatColor.YELLOW, "Cannot check database version!");
                }
            } catch (SQLException ex) {
                InnPlugin.logError("SQLException ", ex);
                return false;
            } finally {
                closeResultSet(result);
                closePreparedStatement(statement);
            }
        }
        return true;
    }

    /**
     * Close database connection
     */
    public static void closeConnection() {
        try {
            connection.close();
            connection = null;
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }

    /**
     * Use this method to get the database connection
     * @return
     */
    public static Connection getConnection() throws SQLException {
        if (checkConnection()) {
            return connection;
        } else {
            throw new SQLException("Cannot connect to database!");
        }
    }

    public static PreparedStatement prepareStatement(String sql) throws SQLException {
        return getConnection().prepareStatement(sql);
    }

    public static PreparedStatement prepareStatementWithAutoGeneratedKeys(String sql) throws SQLException {
        return getConnection().prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
    }

    /**
     * Closes the specified prepared statement
     * @param statement
     */
    public static void closePreparedStatement(PreparedStatement statement) {
        if (statement == null) {
            return;
        }

        try {
            if (!statement.isClosed()) {
                statement.close();
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Could not close statement!", ex);
        }
    }

    /**
     * Closes the specified result set
     * @param set
     */
    public static void closeResultSet(ResultSet set) {
        if (set == null) {
            return;
        }

        try {
            if (!set.isClosed()) {
                set.close();
            }
        } catch (SQLException ex) {
            InnPlugin.logError("Could not close result set!", ex);
        }
    }

}
